import { FunctionComponent, useState } from "react";
import NavBar from "../components/NavBar";
import FooterContainer from "../components/FooterContainer";
import { useLanguage } from '../context/LanguageContext';
import { SHA256 } from "crypto-js";
import "./CoursePage.css";

const translations = {
  EN: {
    answer0: "pentest",
    answer1: "vulnerabilities",
    answer2: "external",
    answer3: "internal",
    answer4: "social",
    answer10: "active",
    answer11: "passive",
    placeholder: "Answer",
    incorrect: "Oops.. The answer is incorrect"
  },
  KZ: {
    answer0: "пентест",
    answer1: "осалдықтар",
    answer2: "сыртқы",
    answer3: "ішкі",
    answer4: "әлеуметтік",
    answer10: "белсенді",
    answer11: "пассивті",
    placeholder: "Жауап",
    incorrect: "Жауап дұрыс емес"
  },
  RU: {
    answer0: "пентест",
    answer1: "уязвимости",
    answer2: "внешний",
    answer3: "внутренний",
    answer4: "социальный",
    answer10: "активный",
    answer11: "пассивный",
    placeholder: "Ответ",
    incorrect: "Ой.. Ответ неверен"
  },
}

// Функция подсказки
const HintPopup: FunctionComponent<{ hint: string, onClose: () => void }> = ({ hint, onClose }) => (
  <div className="popup">
    <div className="popup-content">
      <button className="close-button" onClick={onClose}>&times;</button>
      <p>{hint}</p>
    </div>
  </div>
);

const CoursePagePentest: FunctionComponent = () => {
  const { language, setLanguage } = useLanguage(); // Использование кастомного хука для управления языком
  const t = translations[language]; // Получение переводов на основе выбранного языка

  // Кол-во dropdown секций
  const [isOpenArray, setIsOpenArray] = useState(new Array(120).fill(false));

  // Раскрытие dropdown секций
  const toggleSection = (index: number) => {
    const updatedIsOpenArray = [...isOpenArray];
    updatedIsOpenArray[index] = !updatedIsOpenArray[index];
    setIsOpenArray(updatedIsOpenArray);
  };

  const studentEmail = "actual_user" // e-mail юзера
  const studentHashFlag1 = SHA256(studentEmail + "_pentest1").toString(); // зашифрованный flag юзера
  const studentHashFlag2 = SHA256(studentEmail + "_pentest2").toString();
  const studentHashFlag3 = SHA256(studentEmail + "_pentest3").toString();
  const studentHashFlag4 = SHA256(studentEmail + "_pentest4").toString();
  const studentHashFlag5 = SHA256(studentEmail + "_pentest_xss").toString();

  const correctAnswers = [t.answer0, t.answer1, t.answer2, t.answer3, t.answer4, "nmap", "burp suite", "-sn", "-a", "-ss", t.answer10, t.answer11, "2016-06-19", "support@gohost.kz", "80", studentHashFlag1, studentHashFlag2, studentHashFlag3, studentHashFlag4, studentHashFlag5]; // массивых ответов на Задания

  const initialAnswerState = { isCorrect: false, isSubmitted: false };
  const [userAnswers, setUserAnswers] = useState(["", ""]);
  const [answerStates, setAnswerStates] = useState(Array(120).fill(initialAnswerState));
  const [alertVisible, setAlertVisible] = useState(false);

  // Функция для обработки изменений в ответах пользователя
  const handleAnswerChange = (index: number, value: string) => {
    setUserAnswers(prevState => {
      const updatedAnswers = [...prevState];
      updatedAnswers[index] = value.toLowerCase();
      return updatedAnswers;
    });
  };

  // Функция для обработки отправки ответа
  const handleSubmit = (index: number) => {
    const isCorrect = userAnswers[index] === correctAnswers[index];
    const updatedAnswerStates = [...answerStates];
    updatedAnswerStates[index] = { isCorrect, isSubmitted: true };
    setAnswerStates(updatedAnswerStates);

    // Показывает ошибку на 3 сек, если ответ не правильный
    if (!isCorrect) {
      setAlertVisible(true);
      setTimeout(() => setAlertVisible(false), 3000);
    }
  };

  // Смена стиля кнопки в завимиости от правильности ответа
  const getButtonStyle = (index: number) => {
    const { isCorrect, isSubmitted } = answerStates[index];
    return {
      backgroundColor: isSubmitted && isCorrect ? '#47dd00' : '',
      borderColor: isSubmitted && isCorrect ? '#47dd00' : '',
      color: isSubmitted && isCorrect ? 'white' : '',
      cursor: isSubmitted && isCorrect ? 'auto' : '',
    };
  };

  // Проверка правильности ответа при сабмишне
  const isDisabled = (index: number) => answerStates[index].isSubmitted && answerStates[index].isCorrect;

  // Смена текста кнопки в завимиости от правильности ответа
  const getButtonText = (index: number) => answerStates[index].isSubmitted && answerStates[index].isCorrect ? 'Correct' : 'Submit';
  

  // Функция для отображения подсказки
  const showHint = (hint: string) => {
    setHintText(hint);
    setHintPopupVisible(true);
  };

  // Состояние для отображения подсказки и текста подсказки
  const [hintPopupVisible, setHintPopupVisible] = useState(false);
  const [hintText, setHintText] = useState("");

  // Функция для закрытия всплывающего окна с подсказкой
  const closeHintPopup = () => {
    setHintPopupVisible(false);
    setHintText("");
  };

  const xssmessage = "http://example.com/search?query=<script>alert('XSS');</script>";
  const xssmessage1 = "<script> document.cookie = 'evil_cookie=stolen_data; path=/'; alert(document.cookie); </script>";

  return (
    <div className="course-page">
      <NavBar />
      <div className="course-page-information-container">
        <h1 className="course-page-title">Pentesting Fundamentals</h1>
        <div className="course-page-tags-container">
          <div className="difficulty-container">
            <div className="difficulty-course-page">Difficulty:</div>
            <div className="difficulty-type">
              <div className="type-value">Easy</div>
            </div>
          </div>
          <div className="category-container">
            <div className="category">Category:</div>
            <div className="category-type">
              <div className="categorytypetext">Pentest</div>
            </div>
          </div>
          <div className="author-container">
            <div className="author">Author:</div>
            <div className="cyberskills">CyberSkills</div>
          </div>
        </div>
        <div className="course-page-description">
          Start learning Pentesting Fundamentals course to master your information security skills.
        </div>
      </div>
      {/* Course sections Container */}
      <main className="coursesectionscontainer">
        <div className="coursesectioncontainer" onClick={() => toggleSection(0)} >
          <div className="coursesectionbox">
            <div className="checkboxgraycontainer">
              <img className="checkboxgray-icon" alt="" src="/checkboxgray.svg" />
            </div>
            <div className="coursesectionnametext">Introduction to pentesting</div>
          </div>
          <div className="arrowdowncontainer">
            <img className="arrowdownicon" alt="" src="/arrowdownicon.svg" />
          </div>
        </div>
        {isOpenArray[0] && (
          <div className="course-section-dropdown-container">
            <h3 className="course-section-heading">Что такое Пентестинг?</h3>
            <p className="course-section-paragraph">
              Пентест <i>(penetration testing)</i> – это процесс проведения тестирования информационной системы с целью выявления уязвимостей, которые могут быть использованы злоумышленниками для несанкционированного доступа к данным или системным ресурсам. В ходе пентеста проверяются как технические аспекты системы, так и ее защищенность от социальных атак.
            </p>
            <img className="image"
              loading="lazy"
              alt=""
              src="/pentest.png"
            />

            <p className="course-section-paragraph">
              Пентест – это симуляция атаки на информационную систему с целью оценки уровня её защищенности. Проводится с согласия владельца системы и может включать в себя различные методы и техники взлома. Основная цель пентеста – выявление уязвимостей до того, как их обнаружат злоумышленники, и предоставление рекомендаций по их устранению.
            </p>

            <hr />

            <h3 className="course-section-heading">Основные виды пентестов: внутренний, внешний, социальный</h3>

            <p className="course-section-paragraph">
              Внутренний пентест <i>(internal penetration test)</i> направлен на проверку системы изнутри, как если бы атака осуществлялась сотрудником компании или злоумышленником, получившим доступ к внутренней сети. Такой тест позволяет оценить защищенность внутренних ресурсов, выявить возможные уязвимости в корпоративной сети, а также проверить, насколько эффективно контролируются права доступа сотрудников.
              Примеры тестируемых областей: внутренние серверы и базы данных, корпоративные приложения и веб-сервисы, протоколы и сетевые службы.
            </p>

            <p className="course-section-paragraph">
              Внешний пентест <i>(external penetration test)</i> направлен на проверку системы снаружи, обычно проводится из интернета, чтобы оценить защищенность внешних ресурсов и сетевых периметров. Цель внешнего пентеста – выявить уязвимости, которые могут быть использованы злоумышленниками для проникновения в систему извне.
              Примеры тестируемых областей: веб-сайты и веб-приложения, внешние серверы и сетевые устройства, публичные IP-адреса и открытые порты.
            </p>

            <img className="image"
              loading="lazy"
              alt=""
              src="/pentest_types.png"
            />

            <p className="course-section-paragraph">
              Социальный пентест <i>(social engineering penetration test)</i> направлен на проверку человеческого фактора, включающая в себя методы социальной инженерии для получения доступа к системам или конфиденциальной информации. Социальный пентест помогает выявить слабые места в обучении сотрудников и процедуре безопасности, а также повысить осведомленность о методах социальной инженерии.
              Примеры тестируемых областей: фишинг-атаки, претекстинг <i>(создание ложной истории для получения информации)</i>, физический доступ <i>(попытка проникновения в офис или на территорию компании)</i>.
            </p>

            <div className="questions-container">
              <div className="questions-heading">Задания</div>

              <div className="question-box-container">
                <div className="question-text">
                  Как называется процесс тестирования информационной системы для выявления уязвимостей?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[0]}
                    onChange={(e) => handleAnswerChange(0, e.target.value)}
                    disabled={isDisabled(0)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(0)}
                    disabled={isDisabled(0)}
                    style={getButtonStyle(0)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(0)}
                    >{getButtonText(0)}</div>
                  </button>
                </div>
              </div>

              <div className="question-box-container">
                <div className="question-text">
                  Что выявляется при проведении пентеста?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[1]}
                    onChange={(e) => handleAnswerChange(1, e.target.value)}
                    disabled={isDisabled(1)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(1)}
                    disabled={isDisabled(1)}
                    style={getButtonStyle(1)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(1)}
                    >{getButtonText(1)}</div>
                  </button>
                </div>
              </div>

              <div className="question-box-container">
                <div className="question-text">
                  Специалисты проводят анализ уязвимостей веб-сайта компании, а также открытых портов и сетевых сервисов, доступных из интернета.
                  <br />К какому виду пентестинга это относится?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[2]}
                    onChange={(e) => handleAnswerChange(2, e.target.value)}
                    disabled={isDisabled(2)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(2)}
                    disabled={isDisabled(2)}
                    style={getButtonStyle(2)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(2)}
                    >{getButtonText(2)}</div>
                  </button>
                </div>
              </div>

              <div className="question-box-container">
                <div className="question-text">
                  В компании проводится тестирование для выявления уязвимостей, связанных с внутренними серверами и корпоративными приложениями. Тестировщики работают изнутри корпоративной сети.
                  К какому виду пентестинга это относится?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[3]}
                    onChange={(e) => handleAnswerChange(3, e.target.value)}
                    disabled={isDisabled(3)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(3)}
                    disabled={isDisabled(3)}
                    style={getButtonStyle(3)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(3)}
                    >{getButtonText(3)}</div>
                  </button>
                </div>
              </div>

              <div className="question-box-container">
                <div className="question-text">
                  Тестировщики отправляют фальшивые электронные письма сотрудникам компании с целью получить их учетные данные или другую конфиденциальную информацию.
                  К какому виду пентестинга это относится?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[4]}
                    onChange={(e) => handleAnswerChange(4, e.target.value)}
                    disabled={isDisabled(4)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(4)}
                    disabled={isDisabled(4)}
                    style={getButtonStyle(4)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(4)}
                    >{getButtonText(4)}</div>
                  </button>
                </div>
              </div>

            </div>
          </div>
        )}

        <div className="coursesectioncontainer" onClick={() => toggleSection(1)}>
          <div className="coursesectionbox">
            <div className="checkboxgraycontainer">
              <img
                className="checkboxgray-icon1"
                alt=""
                src="/checkboxgray.svg"
              />
            </div>
            <div className="coursesectionnametext">Pentesting tools</div>
          </div>
          <div className="arrowdowncontainer">
            <img className="arrowdownicon" alt="" src="/arrowdownicon.svg" />
          </div>
        </div>
        {isOpenArray[1] && (
          <div className="course-section-dropdown-container">
            <h3 className="course-section-heading">Инструменты для проведения пентеста</h3>
            <p className="course-section-paragraph">
              Пентестинг требует использования различных инструментов, которые помогают специалистам в области информационной безопасности находить и эксплуатировать уязвимости в системе. Эти инструменты могут быть программными приложениями, утилитами или скриптами, предназначенными для выполнения специфических задач. Важно понимать, что каждый инструмент обладает своими особенностями и предназначен для решения определённых задач в процессе пентеста.
            </p>

            <p className="course-section-paragraph">
              Основные инструменты, используемые в пентестинге, включают:
              <ul>
                <li>👁️<b>Nmap</b> <i>(Network Mapper)</i> – мощный инструмент для сканирования сетей и обнаружения хостов и сервисов.</li>
                <li>🛡️<b>Metasploit</b> – фреймворк для разработки, тестирования и использования эксплойтов. Он позволяет автоматизировать многие задачи пентеста, такие как поиск уязвимостей и запуск атак.</li>
                <li>🦈<b>Wireshark</b> – анализатор сетевого трафика, который позволяет перехватывать и изучать пакеты данных в сети. С его помощью можно выявить подозрительную активность и аномалии в сетевом трафике.</li>
                <li>🟠<b>Burp Suite</b> – инструмент для тестирования безопасности веб-приложений, который позволяет выполнять различные виды атак, такие как SQL-инъекции и XSS.</li>
                <li>🎩<b>John the Ripper</b> – инструмент для взлома паролей. Он используется для проверки слабости паролей путем перебора или атаки по словарю.</li>
              </ul>
              Каждый из этих инструментов предоставляет свои уникальные возможности, и их совместное использование позволяет получить всесторонний анализ безопасности системы.
            </p>

            <hr />

            <h3 className="course-section-heading">Nmap: Инструмент для сканирования сетей</h3>

            <p className="course-section-paragraph">
              Nmap – это мощный и гибкий инструмент для сканирования сетей и обнаружения хостов и сервисов. С его помощью можно обнаруживать открытые порты, идентифицировать запущенные сервисы, определять версии программного обеспечения и операционные системы, а также проводить множество других задач, связанных с анализом сети.
              <br />Nmap доступен для различных операционных систем, включая Windows, macOS и Linux: <a href="https://nmap.org/download">https://nmap.org/download</a>
            </p>

            <img className="image2-icon"
              loading="lazy"
              alt=""
              src="/nmap.png"
            />

            <h3 className="course-section-heading">Команды Nmap</h3>

            <p className="course-section-paragraph">
              После установки Nmap можно начать его использование с выполнения некоторых команд. Эти команды помогут вам освоиться с инструментом и понять его основные возможности.
              <ul>
                <li><span className="highlights">nmap -h</span> - команда выводит справочную информацию и полный список опций и параметров, поддерживаемых Nmap.</li>
                <li><span className="highlights">nmap -sn</span> - опция -sn (ping scan) используется для определения активных устройств в сети. Nmap отправляет ICMP echo-запросы и ждет отклика. Это помогает выявить устройства, которые подключены к сети.</li>
                <li><span className="highlights">nmap -sS</span> - опция -sS (SYN scan) выполняет полуоткрытое сканирование портов, отправляя SYN-пакеты к целевому устройству. Этот метод быстр и скрытен, так как не устанавливает полное TCP-соединение.</li>
                <li><span className="highlights">nmap -A</span> - опция -A (Aggressive scan) выполняет глубокое сканирование, включающее обнаружение сервисов и их версий, а также определение операционной системы и других характеристик целевого устройства.</li>
              </ul>
            </p>

            <div className="questions-container">
              <div className="questions-heading">Задания</div>

              <div className="question-box-container">
                <div className="question-text">
                  Какой инструмент используется для сканирования сетей и обнаружения хостов и сервисов?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[5]}
                    onChange={(e) => handleAnswerChange(5, e.target.value)}
                    disabled={isDisabled(5)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(5)}
                    disabled={isDisabled(5)}
                    style={getButtonStyle(5)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(5)}
                    >{getButtonText(5)}</div>
                  </button>
                  {/* <button className="hint-button" onClick={() => showHint("Hint: The flag is in the /flag endpoint.")}>
                    <div className="hint-button-text">Hint</div>
                  </button> */}
                </div>


              </div>

              <div className="question-box-container">
                <div className="question-text">
                  Какой инструмент используется для тестирования безопасности веб-приложений и позволяет выполнять различные виды атак?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[6]}
                    onChange={(e) => handleAnswerChange(6, e.target.value)}
                    disabled={isDisabled(6)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(6)}
                    disabled={isDisabled(6)}
                    style={getButtonStyle(6)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(6)}
                    >{getButtonText(6)}</div>
                  </button>
                  {/* <button className="hint-button" onClick={() => showHint("Hint: The flag is in the /flag endpoint.")}>
                    <div className="hint-button-text">Hint</div>
                  </button> */}
                </div>


              </div>

              <div className="question-box-container">
                <div className="question-text">
                  Вам необходимо определить, какие устройства активны в подсети. Какую опцию Nmap вы используете?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[7]}
                    onChange={(e) => handleAnswerChange(7, e.target.value)}
                    disabled={isDisabled(7)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(7)}
                    disabled={isDisabled(7)}
                    style={getButtonStyle(7)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(7)}
                    >{getButtonText(7)}</div>
                  </button>
                  {/* <button className="hint-button" onClick={() => showHint("Hint: The flag is in the /flag endpoint.")}>
                    <div className="hint-button-text">Hint</div>
                  </button> */}
                </div>


              </div>

              <div className="question-box-container">
                <div className="question-text">
                  Вы хотите провести глубокое сканирование устройства, включая определение ОС и сервисов. Какую опцию Nmap вы используете?                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[8]}
                    onChange={(e) => handleAnswerChange(8, e.target.value)}
                    disabled={isDisabled(8)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(8)}
                    disabled={isDisabled(8)}
                    style={getButtonStyle(8)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(8)}
                    >{getButtonText(8)}</div>
                  </button>
                  {/* <button className="hint-button" onClick={() => showHint("Hint: The flag is in the /flag endpoint.")}>
                    <div className="hint-button-text">Hint</div>
                  </button> */}
                </div>


              </div>

              <div className="question-box-container">
                <div className="question-text">
                  Вам нужно выполнить полуоткрытое (SYN) сканирование портов на устройстве. Какую опцию Nmap вы введете?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[9]}
                    onChange={(e) => handleAnswerChange(9, e.target.value)}
                    disabled={isDisabled(9)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(9)}
                    disabled={isDisabled(9)}
                    style={getButtonStyle(9)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(9)}
                    >{getButtonText(9)}</div>
                  </button>
                  {/* <button className="hint-button" onClick={() => showHint("Hint: The flag is in the /flag endpoint.")}>
                    <div className="hint-button-text">Hint</div>
                  </button> */}
                </div>


              </div>

            </div>
          </div>
        )}

        <div className="coursesectioncontainer" onClick={() => toggleSection(2)}>
          <div className="coursesectionbox">
            <div className="checkboxgraycontainer">
              <img
                className="checkboxgray-icon1"
                alt=""
                src="/checkboxgray.svg"
              />
            </div>
            <div className="coursesectionnametext">Сканирование и сбор информации</div>
          </div>
          <div className="arrowdowncontainer">
            <img className="arrowdownicon" alt="" src="/arrowdownicon.svg" />
          </div>
        </div>
        {isOpenArray[2] && (
          <div className="course-section-dropdown-container">
            <p className="course-section-paragraph">
              Сканирование сети и сбор информации - это ключевые этапы пентеста, которые позволяют определить слабые места в системе. Принципы сканирования сети включают в себя использование различных инструментов и техник для идентификации активных хостов, открытых портов, запущенных сервисов и версий программного обеспечения. Основная цель сканирования - собрать как можно больше информации о целевой системе, чтобы выявить потенциальные уязвимости.
            </p>

            <p className="course-section-paragraph">
              Методы сбора информации можно разделить на два типа: пассивное и активное исследование.
              <ul>
                <li>Пассивное исследование <i>(passive reconnaissance)</i></li>
                <li>Активное исследование <i>(active reconnaissance)</i></li>
              </ul>
            </p>

            <p className="course-section-paragraph">
              🔭<b>Пассивное исследование</b> - сбор информации без непосредственного взаимодействия с целевой системой.  Пассивное исследование минимизирует риск обнаружения, так как не оставляет следов на целевой системе.
            </p>

            <img className="image2-icon"
              loading="lazy"
              alt=""
              src="/passive.png"
            />

            <p className="course-section-paragraph">
              Примеры включают анализ публичных данных, поиск в социальных сетях, изучение веб-сайтов и использование инструментов.
            </p>

            <p className="course-section-paragraph">
              🔐<b>Активное исследование</b> включает прямое взаимодействие с целевой системой для получения информации. Активное исследование может быть более эффективным, но также более рискованным, так как оно может быть обнаружено системами безопасности.
            </p>

            <img className="image2-icon"
              loading="lazy"
              alt=""
              src="/active.png"
            />

            <p className="course-section-paragraph">
              Примеры включают сканирование сети с использованием таких инструментов, как Nmap, отправку запросов к веб-серверу для получения баннеров с информацией о сервере.            </p>

            <div className="questions-container">
              <div className="questions-heading">Задания</div>

              <div className="question-box-container">
                <div className="question-text">
                  Вы отправляете HTTP-запросы к веб-серверу, чтобы получить баннеры, содержащие информацию о версии веб-сервера и операционной системы. Какой метод исследования вы используете?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[10]}
                    onChange={(e) => handleAnswerChange(10, e.target.value)}
                    disabled={isDisabled(10)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(10)}
                    disabled={isDisabled(10)}
                    style={getButtonStyle(10)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(10)}
                    >{getButtonText(10)}</div>
                  </button>
                  {/* <button className="hint-button" onClick={() => showHint("Hint: The flag is in the /flag endpoint.")}>
                    <div className="hint-button-text">Hint</div>
                  </button> */}
                </div>

              </div>

              <div className="question-box-container">
                <div className="question-text">
                  Вы анализируете публично доступные данные о компании, включая их веб-сайты и профили в социальных сетях, чтобы собрать информацию о ее сотрудниках и инфраструктуре. Какой метод исследования вы используете?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[11]}
                    onChange={(e) => handleAnswerChange(11, e.target.value)}
                    disabled={isDisabled(11)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(11)}
                    disabled={isDisabled(11)}
                    style={getButtonStyle(11)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(11)}
                    >{getButtonText(11)}</div>
                  </button>
                  {/* <button className="hint-button" onClick={() => showHint("Hint: The flag is in the /flag endpoint.")}>
                    <div className="hint-button-text">Hint</div>
                  </button> */}
                </div>

              </div>

            </div>
          </div>
        )}

        <div className="coursesectioncontainer" onClick={() => toggleSection(3)}>
          <div className="coursesectionbox">
            <div className="checkboxgraycontainer">
              <img
                className="checkboxgray-icon1"
                alt=""
                src="/checkboxgray.svg"
              />
            </div>
            <div className="coursesectionnametext">Инструменты пассивного исследования</div>
          </div>
          <div className="arrowdowncontainer">
            <img className="arrowdownicon" alt="" src="/arrowdownicon.svg" />
          </div>
        </div>
        {isOpenArray[3] && (
          <div className="course-section-dropdown-container">

            <h3 className="course-section-heading">WHOIS</h3>

            <p className="course-section-paragraph">
              ❓<b>Whois</b> - протокол, который используется для запроса базы данных о регистрации доменных имен. С его помощью можно получить информацию о владельце домена, дате регистрации, сроке действия, регистраторах и контактных данных.
            </p>

            <p className="course-section-paragraph">
              Whois предоставляет разнообразные команды для получения информации о доменах и IP-адресах. Вот некоторые из них:
              <ul>
                <li><span className="highlights">whois (домен)</span> - команда возвращает данные о владельце домена, регистраторе, дате регистрации и истечении срока действия, а также контактную информацию. </li>
                <li><span className="highlights">whois -v (домен)</span> - команда запрашивает более подробную информацию о домене, включая дополнительную информацию о регистрациях и обновлениях.</li>
                <li><span className="highlights">whois (IP адрес)</span> - команда предоставляет данные об организации, которой принадлежит IP-адрес, и контактные данные.</li>
                <li><span className="highlights">whois -h whois.verisign-grs.com (домен)</span> - запрос информации о домене через указанный сервер whois. Эта команда полезна, если нужно получить данные через конкретного регистратора.</li>
                <li><span className="highlights">whois (домен) | grep 'Registrar'</span> -  команда запрашивает информацию о домене example.com и фильтрует вывод, чтобы показать только строки, содержащие слово "Registrar" (можно поставить любое слово).</li>


              </ul>
            </p>

            <h3 className="course-section-heading">Пример использования WHOIS</h3>

            <p className="course-section-paragraph">
              Предположим, вы хотите узнать информацию о домене astanait.edu.kz. Вы выполняете команду <span className="highlights">whois astanait.edu.kz</span>.
            </p>

            <img className="image-big"
              loading="lazy"
              alt=""
              src="/whois.png"
            />

            <p className="course-section-paragraph">
              В ответе вы увидите данные о владельце домена, дате регистрации, сроке действия и контактной информации регистратора.
            </p>
            <hr />
            <h3 className="course-section-heading">Shodan</h3>

            <p className="course-section-paragraph">
              🌐<b>Shodan</b> - поисковая система для устройств, подключенных к интернету. В отличие от традиционных поисковых систем, таких как Google, Shodan индексирует IP-адреса и порты, предоставляя информацию о типах подключенных устройств, их расположении, используемом ПО и потенциальных уязвимостях.
            </p>

            <p className="course-section-paragraph">
              Основные функции и возможности Shodan:
              <ul>
                <li>Поиск по ключевым словам (например, введите "apache" в поле поиска на главной странице, чтобы найти устройства с этим ПО).</li>
                <li>Поиск по IP-адресам</li>
                <li>Поиск по портам (например, "port:22", чтобы найти все устройства с открытым портом 22).</li>
              </ul>
            </p>

            <img className="image-big"
              loading="lazy"
              alt=""
              src="/shodan.png"
            />


            <div className="questions-container">
              <div className="questions-heading">Задания</div>

              <div className="question-box-container">
                <div className="question-text">
                  Выполните whois-запрос для домена astanahub.com и ответьте когда был зарегистрирован домен?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[12]}
                    onChange={(e) => handleAnswerChange(12, e.target.value)}
                    disabled={isDisabled(12)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(12)}
                    disabled={isDisabled(12)}
                    style={getButtonStyle(12)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(12)}
                    >{getButtonText(12)}</div>
                  </button>
                  {/* <button className="hint-button" onClick={() => showHint("Hint: The flag is in the /flag endpoint.")}>
                    <div className="hint-button-text">Hint</div>
                  </button> */}
                </div>

              </div>

              <div className="question-box-container">
                <div className="question-text">
                  Выполните whois-запрос для домена astanahub.com и ответьте какой адрес электронной почты указан для контакта?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[13]}
                    onChange={(e) => handleAnswerChange(13, e.target.value)}
                    disabled={isDisabled(13)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(13)}
                    disabled={isDisabled(13)}
                    style={getButtonStyle(13)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(13)}
                    >{getButtonText(13)}</div>
                  </button>
                  {/* <button className="hint-button" onClick={() => showHint("Hint: The flag is in the /flag endpoint.")}>
                    <div className="hint-button-text">Hint</div>
                  </button> */}
                </div>

              </div>

              <div className="question-box-container">
                <div className="question-text">
                  В <a href="www.shodan.io">Shodan.io</a> найдите устройство с IP-адресом 104.26.10.78. Какой самый первый порт открыт на этом устройстве?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[14]}
                    onChange={(e) => handleAnswerChange(14, e.target.value)}
                    disabled={isDisabled(14)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(14)}
                    disabled={isDisabled(14)}
                    style={getButtonStyle(14)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(14)}
                    >{getButtonText(14)}</div>
                  </button>
                  {/* <button className="hint-button" onClick={() => showHint("Hint: The flag is in the /flag endpoint.")}>
                    <div className="hint-button-text">Hint</div>
                  </button> */}
                </div>

              </div>

            </div>
          </div>
        )}

        <div className="coursesectioncontainer" onClick={() => toggleSection(4)}>
          <div className="coursesectionbox">
            <div className="checkboxgraycontainer">
              <img
                className="checkboxgray-icon1"
                alt=""
                src="/checkboxgray.svg"
              />
            </div>
            <div className="coursesectionnametext">SQL Injection</div>
          </div>
          <div className="arrowdowncontainer">
            <img className="arrowdownicon" alt="" src="/arrowdownicon.svg" />
          </div>
        </div>
        {isOpenArray[4] && (
          <div className="course-section-dropdown-container">

            <h3 className="course-section-heading">SQL-инъекции</h3>

            <p className="course-section-paragraph">
              SQL-инъекции (SQLi) являются одним из наиболее распространенных и опасных видов атак на веб-приложения. Эта атака позволяет злоумышленнику выполнять произвольные SQL-запросы в базе данных приложения, что может привести к утечке конфиденциальной информации, изменению данных или даже полному компрометированию системы.
            </p>

            <h3 className="course-section-heading">Примеры SQL-инъекции</h3>

            <p className="course-section-paragraph">
              Пример №1. Предположим, у нас есть веб-форма для входа в систему с полями "username" и "password". Запрос к базе данных может выглядеть так:
              <ul>
                <li><span className="highlights">SELECT * FROM users WHERE username = 'admin' AND password = 'password123';</span></li>
              </ul>
              Злоумышленник может ввести admin' -- в поле "username" и любой текст в поле "password". Это изменит запрос следующим образом:
              <ul>
                <li><span className="highlights">SELECT * FROM users WHERE username = 'admin' <span className="gray-comment">'-- AND password = 'password123';</span></span></li>
              </ul>
              Всё после -- будет проигнорировано, и запрос станет:
              <ul>
                <li><span className="highlights">SELECT * FROM users WHERE username = 'admin';</span></li>
              </ul>
              Таким образом, проверка пароля игнорируется, и злоумышленник получит доступ к аккаунту "admin".
            </p>
            <hr />
            <p className="course-section-paragraph">
              Пример №2. Предположим, что у нас такой же запрос к базе данных:
              <ul>
                <li><span className="highlights">SELECT * FROM users WHERE username = 'admin' AND password = 'password123';</span></li>
              </ul>
              Если злоумышленник вводит admin' OR '1'='1 в поле "username" и любой пароль в поле "password", запрос станет:
              <ul>
                <li><span className="highlights">SELECT * FROM users WHERE username = 'admin' OR '1'='1' AND password = 'anything';</span></li>
              </ul>
              Поскольку условие '1'='1' всегда истинно, запрос вернет все записи из таблицы users, предоставляя доступ злоумышленнику.
            </p>

            <hr />

            <h3 className="course-section-heading">Docker</h3>

            <p className="course-section-paragraph">
              Docker предоставляет легкий способ создания изолированных сред для тестирования. Используя готовые контейнеры, можно быстро развернуть веб-приложения с уязвимостями для проведения тестов. <br />
              <i>Используя Docker вы сможете запустить изолированную среду, где вы будете выполнять последующие задания</i>.
            </p>

            <p className="course-section-paragraph">
              В Ubuntu 20.04 и более поздних версиях Docker предустановлен. Его не нужно его устанавливать. Чтобы удостовериться установлен у вас Docker или нет, введите в терминале:
              <ul>
                <li><span className="highlights">sudo docker run hello-world</span></li>
              </ul>
              Если Docker установлен правильно, вы увидите сообщение "Hello from Docker!". Если Docker не установлен, то его можно установить следуя инструкциям по установке: <a href="https://docs.docker.com/desktop/install/linux-install/">https://docs.docker.com/desktop/install/linux-install/</a>
            </p>

            <div className="questions-container">
              <div className="questions-heading">Задания</div>

              <div className="question-box-container">
                <div className="question-text">
                  Введите команду ниже в терминал, затем перейдите на <a href="http://localhost:8001/">localhost:8001</a> в браузере, чтобы запустить Docker-контейнер, где вы должны найти скрытый флаг. <br />
                  Скрытый флаг находится на странице флага: <br />
                  <span className="highlights">sudo docker run -d -p 8001:5000 --env USER=actual_user cyberskillscourse/pentest1</span> <br />
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[15]}
                    onChange={(e) => handleAnswerChange(15, e.target.value)}
                    disabled={isDisabled(15)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(15)}
                    disabled={isDisabled(15)}
                    style={getButtonStyle(15)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(15)}
                    >{getButtonText(15)}</div>
                  </button>
                  <button className="hint-button" onClick={() => showHint("Подсказка: Флаг находится в пути flag.")}>
                    <div className="hint-button-text">Hint</div>
                  </button>
                </div>

              </div>

              <div className="question-box-container">
                <div className="question-text">
                  Введите команду ниже в терминал, затем перейдите на <a href="http://localhost:8002/">localhost:8002</a> в браузере, чтобы запустить Docker-контейнер, где вы должны найти скрытый флаг. <br />
                  Здесь вы должны применить SQL-инъекции, чтобы найти скрытый флаг: <br />
                  <span className="highlights">sudo docker run -d -p 8002:5000 --env USER=actual_user cyberskillscourse/pentest2</span> <br />
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[16]}
                    onChange={(e) => handleAnswerChange(16, e.target.value)}
                    disabled={isDisabled(16)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(16)}
                    disabled={isDisabled(16)}
                    style={getButtonStyle(16)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(16)}
                    >{getButtonText(16)}</div>
                  </button>
                  <button className="hint-button" onClick={() => showHint("Подсказка: Используйте комментирование ('--)")}>
                    <div className="hint-button-text">Hint</div>
                  </button>
                </div>

              </div>

            </div>
          </div>
        )}

        <div className="coursesectioncontainer" onClick={() => toggleSection(5)}>
          <div className="coursesectionbox">
            <div className="checkboxgraycontainer">
              <img
                className="checkboxgray-icon1"
                alt=""
                src="/checkboxgray.svg"
              />
            </div>
            <div className="coursesectionnametext">Authentication vulnerabilities</div>
          </div>
          <div className="arrowdowncontainer">
            <img className="arrowdownicon" alt="" src="/arrowdownicon.svg" />
          </div>
        </div>
        {isOpenArray[5] && (
          <div className="course-section-dropdown-container">

            <h3 className="course-section-heading">Уязвимости аутентификации</h3>

            <p className="course-section-paragraph">
              Уязвимости аутентификации являются одними из наиболее распространенных и опасных в веб-приложениях. Атаки на аутентификацию направлены на получение несанкционированного доступа к учетным записям пользователей или административным панелям. Одним из распространенных методов атаки является brute forcing, или перебор паролей.
            </p>

            <h3 className="course-section-heading">Brute Forcing</h3>

            <p className="course-section-paragraph">
              Brute Forcing - это метод атаки, при котором злоумышленник последовательно перебирает все возможные комбинации логинов и паролей до тех пор, пока не найдет правильную. Эффективность brute forcing зависит от сложности пароля и мощности вычислительных ресурсов, доступных злоумышленнику. Веб-приложения с недостаточно сильными паролями и без механизмов защиты от многократных попыток входа особенно уязвимы к таким атакам.
            </p>

            <h3 className="course-section-heading">Burp Suite</h3>

            <p className="course-section-paragraph">
              Ранее мы уже упоминали Burp Suite, комплексный инструмент для тестирования безопасности веб-приложений. Он включает в себя множество функций, таких как прокси-сервер для перехвата трафика, модуль для выполнения атак (Intruder) и модуль для анализа кода (Repeater). Установить можно на офицальном сайте: <a href="https://portswigger.net/burp/communitydownload">https://portswigger.net/burp/communitydownload</a>
            </p>

            <p className="course-section-paragraph">
              Основные функции Burp Suite:
              <ol>
                <li><b>Proxy:</b> Перехват и изменение HTTP/HTTPS-запросов и ответов между браузером и сервером.</li>
                <li><b>Repeater:</b> Повторный запуск и изменение запросов вручную для детального анализа.</li>
                <li><b>Intruder:</b> Автоматизация атак с использованием различных техник, таких как перебор паролей или SQL-инъекций.</li>
              </ol>
              С использованием Burp Suite Intruder можно легко автоматизировать процесс brute forcing.
            </p>
            <hr />
            <h3 className="course-section-heading">Brute Forcing в Burp Suite</h3>

            <p className="course-section-paragraph">
              Предположим, вы хотите провести атаку brute forcing на веб-приложение с помощью Burp Suite:
              <ol>
                <li>Сначала вы открываете встроенный браузер в Burp Suite и переходите в целевое веб-приложение.</li>
                <img className="image-big"
                  loading="lazy"
                  alt=""
                  src="/target.png"
                />

                <li>Затем вы входите на страницу входа и перехватываете HTTP-запрос с логином и паролем  в Burp Proxy.</li>
                <img className="image-big"
                  loading="lazy"
                  alt=""
                  src="/proxy_intercept.png"
                />

                <li>Этот запрос вы отправляете в Burp Repeater (ПКМ по запросу и кликакете на "Send to Repeater") для тестирования различных параметров вручную.</li>
                <img className="image-big"
                  loading="lazy"
                  alt=""
                  src="/repeater intercept.png"
                />

                <li>После этого вы настраиваете Burp Intruder (ПКМ по запросу и кликакете на "Send to Intruder") для автоматизации brute forcing. Выделите элемент (например, поле пароля), который хотите перебрать, и нажмите кнопку "Add".</li>
                <img className="image-big"
                  loading="lazy"
                  alt=""
                  src="/intruder_payload.png"
                />

                <li>Затем переходите во вкладку Payloads, загружаете список паролей, запускаете атаку (кнопка "Start atack") и анализируете ответы сервера, чтобы определить успешные комбинации.</li>
                <img className="image-big"
                  loading="lazy"
                  alt=""
                  src="/payloads.png"
                />
              </ol>
            </p>

            <p className="course-section-paragraph">
              <ul>
                Ответы сервера, которые определяют успешность атаки могут быть:
                <li>HTTP-статусы (успешный вход статус 200 (OK), в то время как неудачные попытки возвращают 401 (Unauthorized) или 403 (Forbidden))</li>
                <li>Длина ответа (например, страница после успешного входа может содержать больше данных (личный кабинет, приветственное сообщение)).</li>
                <li>Тело ответа (проверяйте содержимое ответа на наличие ключевых слов ("Welcome", "Dashboard"), которые могут указывать на успешный вход).</li>
                <li>Редиректы (успешный вход может привести к перенаправлению на другую страницу (редирект с 302 Found), в то время как неудачные попытки входа остаются на той же странице).</li>
              </ul>
            </p>

            <div className="questions-container">
              <div className="questions-heading">Задания</div>

              <div className="question-text">
                В этих заданиях вам потребуется список пользователей и паролей для проведения brute forcing атаки. Готовые списки можно найти здесь: <a href="https://github.com/DXSKULL/Authentication-Data/blob/main/Passwords.txt">Пароли</a>,  <a href="https://github.com/DXSKULL/Authentication-Data/blob/main/Usernames.txt">Пользователи</a>.
              </div>

              <div className="question-box-container">
                <div className="question-text">
                  Введите команду ниже в терминал, затем перейдите на <a href="http://localhost:8003/">localhost:8003</a> в браузере, чтобы запустить Docker-контейнер, где вы должны найти скрытый флаг. <br />
                  Здесь вы должны применить brute forcing атаку пароля, используя Burp Suite, чтобы найти скрытый флаг: <br />
                  <span className="highlights">sudo docker run -d -p 8003:5000 --env USER=actual_user cyberskillscourse/pentest3</span> <br />
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[17]}
                    onChange={(e) => handleAnswerChange(17, e.target.value)}
                    disabled={isDisabled(17)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(17)}
                    disabled={isDisabled(17)}
                    style={getButtonStyle(17)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(17)}
                    >{getButtonText(17)}</div>
                  </button>
                </div>

              </div>

              <div className="question-box-container">
                <div className="question-text">
                  Введите команду ниже в терминал, затем перейдите на <a href="http://localhost:8004/">localhost:8004</a> в браузере, чтобы запустить Docker-контейнер, где вы должны найти скрытый флаг. <br />
                  Здесь вы должны применить brute forcing атаку пользователя и пароля, используя Burp Suite, чтобы найти скрытый флаг: <br />
                  <span className="highlights">sudo docker run -d -p 8004:5000 --env USER=actual_user cyberskillscourse/pentest4</span> <br />
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[18]}
                    onChange={(e) => handleAnswerChange(18, e.target.value)}
                    disabled={isDisabled(18)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(18)}
                    disabled={isDisabled(18)}
                    style={getButtonStyle(18)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(18)}
                    >{getButtonText(18)}</div>
                  </button>
                  <button className="hint-button" onClick={() => showHint("Подсказка: Используйте режим атаки 'Cluster bomb', чтобы перебрать несколько параметров одновременно.")}>
                    <div className="hint-button-text">Hint</div>
                  </button>
                </div>

              </div>

            </div>
          </div>
        )}

        <div className="coursesectioncontainer" onClick={() => toggleSection(6)}>
          <div className="coursesectionbox">
            <div className="checkboxgraycontainer">
              <img
                className="checkboxgray-icon1"
                alt=""
                src="/checkboxgray.svg"
              />
            </div>
            <div className="coursesectionnametext">Межсайтовый скриптинг (XSS)</div>
          </div>
          <div className="arrowdowncontainer">
            <img className="arrowdownicon" alt="" src="/arrowdownicon.svg" />
          </div>
        </div>
        {isOpenArray[6] && (
          <div className="course-section-dropdown-container">

            <h3 className="course-section-heading">Межсайтовый скриптинг (XSS)</h3>

            <p className="course-section-paragraph">
            Межсайтовый скриптинг (XSS) - это тип уязвимости веб-приложений, который позволяет злоумышленникам внедрять вредоносные скрипты на веб-страницы, которые затем исполняются в браузерах пользователей. С помощью XSS злоумышленник может похищать данные пользователей, изменять отображаемое содержимое или выполнять другие вредоносные действия.
            </p>

            <p className="course-section-paragraph">
            Существует несколько типов XSS-атак:
            <ul>
              <li>Отраженный XSS: Происходит, когда вредоносный скрипт отражается от веб-сервера в ответ на запрос, который содержит вредоносный код.</li>
              <li>Хранимый XSS: Происходит, когда вредоносный скрипт сохраняется на сервере и отображается всем пользователям, которые просматривают зараженную страницу.</li>
              <li>DOM-based XSS: Происходит, когда уязвимость существует в клиентской части кода, а не на сервере. Вредоносный скрипт модифицирует DOM-структуру страницы, что приводит к выполнению вредоносного кода.</li>
            </ul>
            </p>

            <h3 className="course-section-heading">Примеры</h3>
            
            <p className="course-section-paragraph">
            Пример №1. Предположим, у нас есть форма поиска на веб-сайте, которая принимает параметр query из URL и отображает его на странице результатов без должной валидации и экранирования. Злоумышленник может создать URL, содержащий вредоносный JavaScript-код, например:
            <ul>
              <li><span className="highlights">{xssmessage}</span></li>
            </ul>
            При переходе по этой ссылке скрипт выполнится в браузере жертвы, вызывая появление окна с сообщением "XSS".
            </p>
<hr />
            <p className="course-section-paragraph">
            Пример №2. Предположим, есть веб-приложение, в котором есть форма для комментариев. Комментарии сохраняются и отображаются на странице без должной проверки и экранирования. Это делает приложение уязвимым к XSS-атакам. 
            <br />Здесь можно совершить атаку, которая эффективно устанавливает cookies и затем выводит ее содержимое во всплывающем окне, что позволяет злоумышленнику собирать информацию о cookies пользователей:
            <ul>
              <li><span className="highlights">{xssmessage1}</span></li>
            </ul>
            Данный скрипт устанавливает новую cookie с именем "evil_cookie" и значением "stolen_data". Cookies устанавливается на корневой путь сайта (path=/), что означает, что она будет доступна для всех страниц на этом сайте и выводит всплывающее окно с содержимым всех доступных cookies на текущей странице. Функция document.cookie предоставляет доступ ко всем cookies на странице в виде строки.
            </p>

            <div className="questions-container">
              <div className="questions-heading">Задания</div>

              <div className="question-box-container">
                <div className="question-text">
                  В этом задании вы должны войти, как пользователь "user" с паролем "password" и должны внести вредоносный скрипт в раздел комментариев.  Когда комментарий будет опубликован, скрипт должен выполниться, показав оповещение с cookies документа. Обновите страницу профиля, чтобы проверить, появился ли флаг.<br />
                  Введите команду ниже в терминал, затем перейдите на <a href="http://localhost:8005/">localhost:8005</a> в браузере, чтобы запустить Docker-контейнер, где вы должны найти скрытый флаг: <br />
                  <span className="highlights">sudo docker run -d -p 8005:5000 --env USER=actual_user cyberskillscourse/pentest_xss</span> <br />
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[19]}
                    onChange={(e) => handleAnswerChange(19, e.target.value)}
                    disabled={isDisabled(19)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(19)}
                    disabled={isDisabled(19)}
                    style={getButtonStyle(19)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(19)}
                    >{getButtonText(19)}</div>
                  </button>
                  <button className="hint-button" onClick={() => showHint("Подсказка: Попробуйте ввести в поле комментария код, который может взаимодействовать с cookie на странице.")}>
                    <div className="hint-button-text">Hint</div>
                  </button>
                </div>

              </div>

            </div>
          </div>
        )}
      </main>
      {/* Course sections Container END */}
      {alertVisible && (
        <div className="alert-container">
          <div className="alert-message">{t.incorrect}</div>
        </div>
      )}
      {hintPopupVisible && <HintPopup hint={hintText} onClose={closeHintPopup} />}
      <FooterContainer />
    </div>
  );
};

export default CoursePagePentest;
