import { FunctionComponent, useState } from "react";
import NavBar from "../components/NavBar";
import FooterContainer from "../components/FooterContainer";
import "./CoursePage.css";

const HintPopup: FunctionComponent<{ hint: string, onClose: () => void }> = ({ hint, onClose }) => (
  <div className="popup">
    <div className="popup-content">
      <button className="close-button" onClick={onClose}>&times;</button>
      <p>{hint}</p>
    </div>
  </div>
);

const CoursePage: FunctionComponent = () => {
  const [isOpenArray, setIsOpenArray] = useState(new Array(3).fill(false));

  const toggleSection = (index: number) => {
    const updatedIsOpenArray = [...isOpenArray];
    updatedIsOpenArray[index] = !updatedIsOpenArray[index];
    setIsOpenArray(updatedIsOpenArray);
  };

  const [hintPopupVisible, setHintPopupVisible] = useState(false);
  const [hintText, setHintText] = useState("");

  const showHint = (hint: string) => {
    setHintText(hint);
    setHintPopupVisible(true);
  };

  const closeHintPopup = () => {
    setHintPopupVisible(false);
    setHintText("");
  };

  const correctAnswers = ["CTF{HFbgrIMLihdyPmflhSTe9Q==}", "CTF{lon0RNufZPmOzcJubxg0qA==}", "CTF{B2gF5m9it1q6fyq0TP2Dbw==}"];
  const [userAnswers, setUserAnswers] = useState(["", ""]);
  const [answerStates, setAnswerStates] = useState([
    { isCorrect: false, isSubmitted: false },
    { isCorrect: false, isSubmitted: false },
    { isCorrect: false, isSubmitted: false }
  ]);
  const [alertVisible, setAlertVisible] = useState(false);

  const handleAnswerChange = (index: number, value: string) => {
    const updatedAnswers = [...userAnswers];
    updatedAnswers[index] = value;
    setUserAnswers(updatedAnswers);
  };

  const handleSubmit = (index: number) => {
    const isCorrect = userAnswers[index] === correctAnswers[index];
    const updatedAnswerStates = [...answerStates];
    updatedAnswerStates[index] = { isCorrect, isSubmitted: true };
    setAnswerStates(updatedAnswerStates);

    if (!isCorrect) {
      setAlertVisible(true);
      setTimeout(() => setAlertVisible(false), 3000);
    }
  };


  return (
    <div className="course-page">
      <NavBar />
      <div className="course-page-information-container">
        <h1 className="course-page-title">Pentesting Fundamentals</h1>
        <div className="course-page-tags-container">
          <div className="difficulty-container">
            <div className="difficulty-course-page">Difficulty:</div>
            <div className="difficulty-type">
              <div className="type-value">Easy</div>
            </div>
          </div>
          <div className="category-container">
            <div className="category">Category:</div>
            <div className="category-type">
              <div className="categorytypetext">Pentest</div>
            </div>
          </div>
          <div className="author-container">
            <div className="author">Author:</div>
            <div className="cyberskills">CyberSkills</div>
          </div>
        </div>
        <div className="course-page-description">
          Start learning Pentest fundamentals to master your information security skills.
        </div>
      </div>
      {/* Course sections Container */}
      <main className="coursesectionscontainer">
        <div className="coursesectioncontainer" onClick={() => toggleSection(0)} >
          <div className="coursesectionbox">
            <div className="checkboxgraycontainer">
              <img className="checkboxgray-icon" alt="" src="/checkboxgray.svg" />
            </div>
            <div className="coursesectionnametext">Introduction to Pentest</div>
          </div>
          <div className="arrowdowncontainer">
            <img className="arrowdownicon" alt="" src="/arrowdownicon.svg" />
          </div>
        </div>
        {isOpenArray[0] && (
          <div className="course-section-dropdown-container">
            <p className="course-section-paragraph">
              Explanation of pentest
            </p>
            <p className="course-section-paragraph">
              examples of pentest
            </p>

            <div className="questions-container">
              <div className="questions-heading">Questions</div>
              <div className="question-box-container">
                <div className="question-text">
                  In this task, you need to find the flag hidden on the server. Connect to the server running  the following command on your virtual machine: <br />
                  <b>sudo docker run -d -p 8997:5000 --env USER=student_user cyberskillscourse/pentest1</b>
                </div>
                <div className="anser-box-container">
                  <input
                    className="answer-box-input-field"
                    placeholder="Answer"
                    type="text"
                    value={userAnswers[0]}
                    onChange={(e) => handleAnswerChange(0, e.target.value)}
                    disabled={answerStates[0].isSubmitted && answerStates[0].isCorrect}
                  />
                  <button
                    className="submit-button"
                    onClick={() => handleSubmit(0)}
                    disabled={answerStates[0].isSubmitted && answerStates[0].isCorrect}
                    style={{
                      backgroundColor: answerStates[0].isSubmitted && answerStates[0].isCorrect ? '#47dd00' : '',
                      borderColor: answerStates[0].isSubmitted && answerStates[0].isCorrect ? '#47dd00' : '',
                      color: answerStates[0].isSubmitted && answerStates[0].isCorrect ? 'white' : '',
                    }}
                  >
                    <div className="submit-button-text"
                      style={{
                        color: answerStates[0].isSubmitted && answerStates[0].isCorrect ? 'black' : '',
                        cursor: answerStates[0].isSubmitted && answerStates[0].isCorrect ? 'auto' : '',
                      }}
                    >{answerStates[0].isSubmitted && answerStates[0].isCorrect ? 'Correct' : 'Submit'}</div>
                  </button>
                  <button className="hint-button" onClick={() => showHint("Hint: The flag is in the /flag endpoint.")}>
                    <div className="hint-button-text">Hint</div>
                  </button>
                </div>
              </div>
              <div className="question-box-container">
                <div className="question-text">
                  In this task, you need to find the flag hidden on the server. Connect to the server running  the following command on your virtual machine: <br />
                  <b>sudo docker run -d -p 8996:5000 --env USER=student_user cyberskillscourse/pentest2</b>
                </div>
                <div className="anser-box-container">
                  <input
                    className="answer-box-input-field"
                    placeholder="Answer"
                    type="text"
                    value={userAnswers[1]}
                    onChange={(e) => handleAnswerChange(1, e.target.value)}
                    disabled={answerStates[1].isSubmitted && answerStates[1].isCorrect}
                  />
                  <button
                    className="submit-button"
                    onClick={() => handleSubmit(1)}
                    disabled={answerStates[1].isSubmitted && answerStates[1].isCorrect}
                    style={{
                      backgroundColor: answerStates[1].isSubmitted && answerStates[1].isCorrect ? '#47dd00' : '',
                      borderColor: answerStates[1].isSubmitted && answerStates[1].isCorrect ? '#47dd00' : '',
                      color: answerStates[1].isSubmitted && answerStates[1].isCorrect ? 'white' : '',
                    }}
                  >
                    <div className="submit-button-text"
                      style={{
                        color: answerStates[1].isSubmitted && answerStates[1].isCorrect ? 'black' : '',
                        cursor: answerStates[1].isSubmitted && answerStates[1].isCorrect ? 'auto' : '',
                      }}
                    >{answerStates[1].isSubmitted && answerStates[1].isCorrect ? 'Correct' : 'Submit'}</div>
                  </button>
                  <button className="hint-button" onClick={() => showHint("Hint: The flag is in the /flag endpoint.")}>
                    <div className="hint-button-text">Hint</div>
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
        <div className="coursesectioncontainer" onClick={() => toggleSection(1)}>
          <div className="coursesectionbox">
            <div className="checkboxgraycontainer">
              <img
                className="checkboxgray-icon1"
                alt=""
                src="/checkboxgray.svg"
              />
            </div>
            <div className="coursesectionnametext">Pentest 2</div>
          </div>
          <div className="arrowdowncontainer">
            <img className="arrowdownicon" alt="" src="/arrowdownicon.svg" />
          </div>
        </div>
        {isOpenArray[1] && (
          <div className="course-section-dropdown-container">
            <p className="course-section-paragraph">
              Explanation of pentest
            </p>
            <p className="course-section-paragraph">
              examples of pentest
            </p>
            <div className="questions-container">
              <div className="questions-heading">Questions</div>
              <div className="question-box-container">
                <div className="question-text">
                  In this task, you need to find the flag hidden on the server. Connect to the server running  the following command on your virtual machine: <br />
                  <b>sudo docker run -d -p 8995:5000 --env USER=student_user cyberskillscourse/pentest3</b>
                </div>
                <div className="anser-box-container">
                  <input
                    className="answer-box-input-field"
                    placeholder="Answer"
                    type="text"
                    value={userAnswers[2]}
                    onChange={(e) => handleAnswerChange(2, e.target.value)}
                    disabled={answerStates[2].isSubmitted && answerStates[2].isCorrect}
                  />
                  <button
                    className="submit-button"
                    onClick={() => handleSubmit(2)}
                    disabled={answerStates[2].isSubmitted && answerStates[2].isCorrect}
                    style={{
                      backgroundColor: answerStates[2].isSubmitted && answerStates[2].isCorrect ? '#47dd00' : '',
                      borderColor: answerStates[2].isSubmitted && answerStates[2].isCorrect ? '#47dd00' : '',
                
                    }}
                  >
                    <div className="submit-button-text"
                      style={{
                        color: answerStates[2].isSubmitted && answerStates[2].isCorrect ? 'white' : '',
                        cursor: answerStates[2].isSubmitted && answerStates[2].isCorrect ? 'auto' : '',
                      }}
                    >{answerStates[2].isSubmitted && answerStates[2].isCorrect ? 'Correct' : 'Submit'}</div>
                  </button>
                  <button className="hint-button" onClick={() => showHint("Hint: The flag is in the /flag endpoint.")}>
                    <div className="hint-button-text">Hint</div>
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </main>
      {/* Course sections Container END */}
      {alertVisible && (
        <div className="alert-container">
          <div className="alert-message">Oops.. The answer is incorrect</div>
        </div>
      )}
      {hintPopupVisible && <HintPopup hint={hintText} onClose={closeHintPopup} />}
      <FooterContainer />
    </div>
  );
};

export default CoursePage;
