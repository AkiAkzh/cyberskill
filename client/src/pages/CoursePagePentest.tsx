import { FunctionComponent, useState } from "react";
import NavBar from "../components/NavBar";
import FooterContainer from "../components/FooterContainer";
import { useLanguage } from '../context/LanguageContext';
import { SHA256 } from "crypto-js";
import "./CoursePage.css";

const translations = {
  EN: {
    answer0: "pentest",
    answer1: "vulnerabilities",
    answer2: "external",
    answer3: "internal",
    answer4: "social",
    placeholder: "Answer",
  },
  KZ: {
    answer0: "пентест",
    answer1: "осалдықтар",
    answer2: "сыртқы",
    answer3: "ішкі",
    answer4: "әлеуметтік",
    placeholder: "Жауап",
  },
  RU: {
    answer0: "пентест",
    answer1: "уязвимости",
    answer2: "внешний",
    answer3: "внутренний",
    answer4: "социальный",
    placeholder: "Ответ",
  },
}

// Функция подсказки
const HintPopup: FunctionComponent<{ hint: string, onClose: () => void }> = ({ hint, onClose }) => (
  <div className="popup">
    <div className="popup-content">
      <button className="close-button" onClick={onClose}>&times;</button>
      <p>{hint}</p>
    </div>
  </div>
);
  
const CoursePagePentest: FunctionComponent = () => {
  const { language, setLanguage } = useLanguage(); // Использование кастомного хука для управления языком
  const t = translations[language]; // Получение переводов на основе выбранного языка

  // Кол-во dropdown секций
  const [isOpenArray, setIsOpenArray] = useState(new Array(120).fill(false)); 

  // Раскрытие dropdown секций
  const toggleSection = (index: number) => {
    const updatedIsOpenArray = [...isOpenArray];
    updatedIsOpenArray[index] = !updatedIsOpenArray[index];
    setIsOpenArray(updatedIsOpenArray);
  };

 
  const studentUserHash = SHA256("actual_user").toString(); // зашифрованный e-mail юзера
  const correctAnswers = [t.answer0, t.answer1, t.answer2, t.answer3, t.answer4]; // массивых ответов на вопросы

  const initialAnswerState = { isCorrect: false, isSubmitted: false };
  const [userAnswers, setUserAnswers] = useState(["", ""]);
  const [answerStates, setAnswerStates] = useState(Array(120).fill(initialAnswerState));
  const [alertVisible, setAlertVisible] = useState(false);

  // Функция для обработки изменений в ответах пользователя
  const handleAnswerChange = (index: number, value: string) => {
    setUserAnswers(prevState => {
      const updatedAnswers = [...prevState];
      updatedAnswers[index] = value.toLowerCase();
      return updatedAnswers;
    });
  };

  // Функция для обработки отправки ответа
  const handleSubmit = (index: number) => {
    const isCorrect = userAnswers[index] === correctAnswers[index];
    const updatedAnswerStates = [...answerStates];
    updatedAnswerStates[index] = { isCorrect, isSubmitted: true };
    setAnswerStates(updatedAnswerStates);

    // Показывает ошибку на 3 сек, если ответ не правильный
    if (!isCorrect) {
      setAlertVisible(true);
      setTimeout(() => setAlertVisible(false), 3000);
    }
  };
  
  // Смена стиля кнопки в завимиости от правильности ответа
  const getButtonStyle = (index: number) => {
    const { isCorrect, isSubmitted } = answerStates[index];
    return {
      backgroundColor: isSubmitted && isCorrect ? '#47dd00' : '',
      borderColor: isSubmitted && isCorrect ? '#47dd00' : '',
      color: isSubmitted && isCorrect ? 'white' : '',
      cursor: isSubmitted && isCorrect ? 'auto' : '',
    };
  };

  // Проверка правильности ответа при сабмишне
  const isDisabled = (index: number) => answerStates[index].isSubmitted && answerStates[index].isCorrect;

  // Смена текста кнопки в завимиости от правильности ответа
  const getButtonText = (index: number) => answerStates[index].isSubmitted && answerStates[index].isCorrect ? 'Correct' : 'Submit';


// Функция для отображения подсказки
  const showHint = (hint: string) => {
    setHintText(hint);
    setHintPopupVisible(true);
  };

  // Состояние для отображения подсказки и текста подсказки
  const [hintPopupVisible, setHintPopupVisible] = useState(false);
  const [hintText, setHintText] = useState("");

   // Функция для закрытия всплывающего окна с подсказкой
  const closeHintPopup = () => {
    setHintPopupVisible(false);
    setHintText("");
  };

  return (
    <div className="course-page">
      <NavBar />
      <div className="course-page-information-container">
        <h1 className="course-page-title">Pentesting Fundamentals</h1>
        <div className="course-page-tags-container">
          <div className="difficulty-container">
            <div className="difficulty-course-page">Difficulty:</div>
            <div className="difficulty-type">
              <div className="type-value">Easy</div>
            </div>
          </div>
          <div className="category-container">
            <div className="category">Category:</div>
            <div className="category-type">
              <div className="categorytypetext">Pentest</div>
            </div>
          </div>
          <div className="author-container">
            <div className="author">Author:</div>
            <div className="cyberskills">CyberSkills</div>
          </div>
        </div>
        <div className="course-page-description">
          Start learning Pentesting Fundamentals course to master your information security skills.
        </div>
      </div>
      {/* Course sections Container */}
      <main className="coursesectionscontainer">
        <div className="coursesectioncontainer" onClick={() => toggleSection(0)} >
          <div className="coursesectionbox">
            <div className="checkboxgraycontainer">
              <img className="checkboxgray-icon" alt="" src="/checkboxgray.svg" />
            </div>
            <div className="coursesectionnametext">Introduction to pentesting</div>
          </div>
          <div className="arrowdowncontainer">
            <img className="arrowdownicon" alt="" src="/arrowdownicon.svg" />
          </div>
        </div>
        {isOpenArray[0] && (
          <div className="course-section-dropdown-container">
            <h3 className="course-section-heading">Что такое Пентестинг?</h3>
            <p className="course-section-paragraph">
              Пентест <i>(penetration testing)</i> – это процесс проведения тестирования информационной системы с целью выявления уязвимостей, которые могут быть использованы злоумышленниками для несанкционированного доступа к данным или системным ресурсам. В ходе пентеста проверяются как технические аспекты системы, так и ее защищенность от социальных атак.
            </p>
            <img className="image"
              loading="lazy"
              alt=""
              src="/pentest.png"
            />

            <p className="course-section-paragraph">
              Пентест – это симуляция атаки на информационную систему с целью оценки уровня её защищенности. Проводится с согласия владельца системы и может включать в себя различные методы и техники взлома. Основная цель пентеста – выявление уязвимостей до того, как их обнаружат злоумышленники, и предоставление рекомендаций по их устранению.
            </p>

            <p className="course-section-paragraph">
              Пентест играет важную роль в обеспечении безопасности информации по следующим причинам:
              <ol>
                <li><b>Предотвращение реальных атак:</b> своевременное обнаружение и устранение уязвимостей позволяет предотвратить возможные атаки злоумышленников.</li>
                <li><b>Соблюдение нормативных требований:</b> многие отрасли требуют проведения регулярных пентестов для соответствия стандартам безопасности (например, PCI-DSS для организаций, работающих с платежными картами).</li>
                <li><b>Улучшение безопасности:</b> результаты пентеста помогают организациям улучшить свои меры защиты и создать более безопасную информационную среду.</li>
                <li><b>Оценка эффективности текущих мер защиты:</b> пентест позволяет проверить, насколько хорошо работают существующие механизмы безопасности и выявить области, требующие улучшения.</li>
              </ol>
            </p>

            <h3 className="course-section-heading">Основные виды пентестов: внутренний, внешний, социальный</h3>

            <p className="course-section-paragraph">
              Внутренний пентест <i>(internal penetration test)</i> направлен на проверку системы изнутри, как если бы атака осуществлялась сотрудником компании или злоумышленником, получившим доступ к внутренней сети. Такой тест позволяет оценить защищенность внутренних ресурсов, выявить возможные уязвимости в корпоративной сети, а также проверить, насколько эффективно контролируются права доступа сотрудников.
              Примеры тестируемых областей: внутренние серверы и базы данных, корпоративные приложения и веб-сервисы, протоколы и сетевые службы.
            </p>

            <p className="course-section-paragraph">
              Внешний пентест <i>(external penetration test)</i> направлен на проверку системы снаружи, обычно проводится из интернета, чтобы оценить защищенность внешних ресурсов и сетевых периметров. Цель внешнего пентеста – выявить уязвимости, которые могут быть использованы злоумышленниками для проникновения в систему извне.
              Примеры тестируемых областей: веб-сайты и веб-приложения, внешние серверы и сетевые устройства, публичные IP-адреса и открытые порты.
            </p>

            <img className="image"
              loading="lazy"
              alt=""
              src="/pentest_types.png"
            />

            <p className="course-section-paragraph">
              Социальный пентест <i>(social engineering penetration test)</i> направлен на проверку человеческого фактора, включающая в себя методы социальной инженерии для получения доступа к системам или конфиденциальной информации. Социальный пентест помогает выявить слабые места в обучении сотрудников и процедуре безопасности, а также повысить осведомленность о методах социальной инженерии.
              Примеры тестируемых областей: фишинг-атаки, претекстинг <i>(создание ложной истории для получения информации)</i>, физический доступ <i>(попытка проникновения в офис или на территорию компании)</i>.
            </p>

            <div className="questions-container">
              <div className="questions-heading">Вопросы</div>

              <div className="question-box-container">
                <div className="question-text">
                Как называется процесс тестирования информационной системы для выявления уязвимостей?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[0]}
                    onChange={(e) => handleAnswerChange(0, e.target.value)}
                    disabled={isDisabled(0)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(0)}
                    disabled={isDisabled(0)}
                    style={getButtonStyle(0)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(0)}
                    >{getButtonText(0)}</div>
                  </button>
                </div>
              </div>

              <div className="question-box-container">
                <div className="question-text">
                Что выявляется при проведении пентеста?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[1]}
                    onChange={(e) => handleAnswerChange(1, e.target.value)}
                    disabled={isDisabled(1)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(1)}
                    disabled={isDisabled(1)}
                    style={getButtonStyle(1)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(1)}
                    >{getButtonText(1)}</div>
                  </button>
                </div>
              </div>

              <div className="question-box-container">
                <div className="question-text">
                Специалисты проводят анализ уязвимостей веб-сайта компании, а также открытых портов и сетевых сервисов, доступных из интернета. 
                <br />К какому виду пентестинга это относится?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[2]}
                    onChange={(e) => handleAnswerChange(2, e.target.value)}
                    disabled={isDisabled(2)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(2)}
                    disabled={isDisabled(2)}
                    style={getButtonStyle(2)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(2)}
                    >{getButtonText(2)}</div>
                  </button>
                </div>
              </div>

              <div className="question-box-container">
                <div className="question-text">
                В компании проводится тестирование для выявления уязвимостей, связанных с внутренними серверами и корпоративными приложениями. Тестировщики работают изнутри корпоративной сети. 
                К какому виду пентестинга это относится?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[3]}
                    onChange={(e) => handleAnswerChange(3, e.target.value)}
                    disabled={isDisabled(3)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(3)}
                    disabled={isDisabled(3)}
                    style={getButtonStyle(3)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(3)}
                    >{getButtonText(3)}</div>
                  </button>
                </div>
              </div>

              <div className="question-box-container">
                <div className="question-text">
                Тестировщики отправляют фальшивые электронные письма сотрудникам компании с целью получить их учетные данные или другую конфиденциальную информацию.
                К какому виду пентестинга это относится?
                </div>
                <div className="anser-box-container">
                  <input className="answer-box-input-field"
                    placeholder={`${t.placeholder}`}
                    type="text"
                    value={userAnswers[4]}
                    onChange={(e) => handleAnswerChange(4, e.target.value)}
                    disabled={isDisabled(4)}
                  />
                  <button className="submit-button"
                    onClick={() => handleSubmit(4)}
                    disabled={isDisabled(4)}
                    style={getButtonStyle(4)}
                  >
                    <div className="submit-button-text"
                      style={getButtonStyle(4)}
                    >{getButtonText(4)}</div>
                  </button>
                  <button className="hint-button" onClick={() => showHint("Hint: The flag is in the /flag endpoint.")}>
                    <div className="hint-button-text">Hint</div>
                  </button>
                </div>
              </div>

            </div>
          </div>
        )}
        <div className="coursesectioncontainer" onClick={() => toggleSection(1)}>
          <div className="coursesectionbox">
            <div className="checkboxgraycontainer">
              <img
                className="checkboxgray-icon1"
                alt=""
                src="/checkboxgray.svg"
              />
            </div>
            <div className="coursesectionnametext">Pentest 2</div>
          </div>
          <div className="arrowdowncontainer">
            <img className="arrowdownicon" alt="" src="/arrowdownicon.svg" />
          </div>
        </div>
      </main>
      {/* Course sections Container END */}
      {alertVisible && (
        <div className="alert-container">
          <div className="alert-message">Oops.. The answer is incorrect</div>
        </div>
      )}
      {hintPopupVisible && <HintPopup hint={hintText} onClose={closeHintPopup} />}
      <FooterContainer />
    </div>
  );
};

export default CoursePagePentest;
